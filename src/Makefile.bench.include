# Copyright (c) 2015-2016 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

bin_PROGRAMS += bench/bench_globe
BENCH_SRCDIR = bench
BENCH_BINARY = bench/bench_globe$(EXEEXT)

RAW_BENCH_FILES = \
  bench/data/block413567.raw
GENERATED_BENCH_FILES = $(RAW_BENCH_FILES:.raw=.raw.h)

bench_bench_globe_SOURCES = \
  $(RAW_BENCH_FILES) \
  bench/addrman.cpp \
  bench/base58.cpp \
  bench/bech32.cpp \
  bench/bench.cpp \
  bench/bench.h \
  bench/bench_globe.cpp \
  bench/block_assemble.cpp \
  bench/ccoins_caching.cpp \
  bench/chacha20.cpp \
  bench/chacha_poly_aead.cpp \
  bench/checkblock.cpp \
  bench/checkqueue.cpp \
  bench/crypto_hash.cpp \
  bench/data.cpp \
  bench/data.h \
  bench/descriptors.cpp \
  bench/duplicate_inputs.cpp \
  bench/examples.cpp \
  bench/gcs_filter.cpp \
  bench/hashpadding.cpp \
  bench/lockedpool.cpp \
  bench/logging.cpp \
  bench/mempool_eviction.cpp \
  bench/mempool_stress.cpp \
  bench/merkle_root.cpp \
  bench/nanobench.cpp \
  bench/nanobench.h \
  bench/peer_eviction.cpp \
  bench/poly1305.cpp \
  bench/prevector.cpp \
  bench/rollingbloom.cpp \
  bench/rpc_blockchain.cpp \
  bench/rpc_mempool.cpp \
  bench/strencodings.cpp \
  bench/util_time.cpp \
  bench/verify_script.cpp \
  bench/blind.cpp \
  bench/mlsag.cpp

nodist_bench_bench_globe_SOURCES = $(GENERATED_BENCH_FILES)

bench_bench_globe_CPPFLAGS = $(AM_CPPFLAGS) $(GLOBE_INCLUDES) $(BOOST_CPPFLAGS) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/
bench_bench_globe_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
bench_bench_globe_LDADD = \
  $(LIBTEST_UTIL) \
  $(LIBGLOBE_NODE) \
  $(LIBGLOBE_WALLET) \
  $(LIBGLOBE_COMMON) \
  $(LIBGLOBE_UTIL) \
  $(LIBGLOBE_CONSENSUS) \
  $(LIBGLOBE_CRYPTO) \
  $(LIBLEVELDB) \
  $(LIBMEMENV) \
  $(LIBSECP256K1) \
  $(LIBUNIVALUE) \
  $(EVENT_PTHREADS_LIBS) \
  $(EVENT_LIBS) \
  $(LIBGLOBE_SMSG) \
  $(LIBGLOBE_MNEMONIC)

if ENABLE_ZMQ
bench_bench_globe_LDADD += $(LIBGLOBE_ZMQ) $(ZMQ_LIBS)
endif

#Needed from init.cpp
if ENABLE_USBDEVICE
bench_bench_globe_LDADD += $(LIBGLOBE_USBDEVICE) $(USB_LIBS) $(HIDAPI_LIBS) $(PROTOBUF_LIBS)
endif

if ENABLE_WALLET
bench_bench_globe_SOURCES += bench/coin_selection.cpp
bench_bench_globe_SOURCES += bench/wallet_balance.cpp
bench_bench_globe_SOURCES += bench/wallet_loading.cpp
bench_bench_globe_SOURCES += bench/globe_add_tx.cpp
endif

bench_bench_globe_LDADD += $(BDB_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(MINIUPNPC_LIBS) $(NATPMP_LIBS) $(SQLITE_LIBS)
bench_bench_globe_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) $(PTHREAD_FLAGS)

CLEAN_GLOBE_BENCH = bench/*.gcda bench/*.gcno $(GENERATED_BENCH_FILES)

CLEANFILES += $(CLEAN_GLOBE_BENCH)

bench/data.cpp: bench/data/block413567.raw.h

globe_bench: $(BENCH_BINARY)

bench: $(BENCH_BINARY) FORCE
	$(BENCH_BINARY)

globe_bench_clean : FORCE
	rm -f $(CLEAN_GLOBE_BENCH) $(bench_bench_globe_OBJECTS) $(BENCH_BINARY)
